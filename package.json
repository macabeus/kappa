{
  "name": "kappa",
  "displayName": "Kappa",
  "description": "General helper for decompilation",
  "version": "0.0.5",
  "publisher": "macabeus",
  "icon": "media/branding/logo.png",
  "type": "module",
  "repository": {
    "type": "git",
    "url": "https://github.com/macabeus/kappa.git"
  },
  "engines": {
    "vscode": "^1.96.0"
  },
  "categories": [
    "Other"
  ],
  "activationEvents": [
    "onLanguage:c",
    "onLanguage:cpp"
  ],
  "main": "./dist/extension.cjs",
  "contributes": {
    "languages": [
      {
        "id": "cpp",
        "filenamePatterns": [
          "**/include/c++/**",
          "**/MSVC/*/include/**"
        ],
        "firstLine": "^/[/*].*-\\*-\\s*C\\+\\+\\s*-\\*-.*"
      },
      {
        "id": "arm",
        "aliases": [
          "ARM Assembly",
          "arm"
        ],
        "extensions": [
          ".s",
          ".S",
          ".asm"
        ],
        "configuration": "./language-configuration.json"
      }
    ],
    "commands": [
      {
        "command": "kappa.runKappaPlugins",
        "title": "Kappa: Run Kappa Plugins"
      },
      {
        "command": "kappa.runTestsForCurrentKappaPlugin",
        "title": "Kappa: Run tests for the current Kappa Plugin"
      },
      {
        "command": "kappa.compareSymbolFromObjectFiles",
        "title": "Kappa: Compare a symbol from two object files"
      },
      {
        "command": "kappa.runPromptBuilder",
        "title": "Kappa: Build a prompt to decompile it"
      },
      {
        "command": "kappa.startDecompilerAgent",
        "title": "Kappa: Start the decompiler agent to decompile a function"
      },
      {
        "command": "kappa.indexCodebase",
        "title": "Kappa: Index codebase"
      },
      {
        "command": "kappa.showChart",
        "title": "Kappa: Show chart"
      },
      {
        "command": "kappa.changeVoyageApiKey",
        "title": "Kappa: Set Voyage AI API Key"
      }
    ],
    "configuration": {
      "type": "object",
      "title": "clangd",
      "properties": {
        "clangd.path": {
          "type": "string",
          "default": "clangd",
          "scope": "machine-overridable",
          "description": "The path to clangd executable, e.g.: /usr/bin/clangd."
        },
        "clangd.useScriptAsExecutable": {
          "type": "boolean",
          "default": false,
          "scope": "machine-overridable",
          "description": "Allows the path to be a script e.g.: clangd.sh."
        },
        "clangd.arguments": {
          "type": "array",
          "default": [],
          "items": {
            "type": "string"
          },
          "description": "Arguments for clangd server."
        },
        "clangd.trace": {
          "type": "string",
          "description": "Names a file that clangd should log a performance trace to, in chrome trace-viewer JSON format."
        },
        "clangd.semanticHighlighting": {
          "type": "boolean",
          "default": true,
          "description": "Enable semantic highlighting in clangd.",
          "deprecationMessage": "Legacy semanticHighlights is no longer supported. Please use `editor.semanticHighlighting.enabled` instead."
        },
        "clangd.fallbackFlags": {
          "type": "array",
          "default": [],
          "items": {
            "type": "string"
          },
          "description": "Extra clang flags used to parse files when no compilation database is found."
        },
        "clangd.serverCompletionRanking": {
          "type": "boolean",
          "default": true,
          "description": "Always rank completion items on the server as you type. This produces more accurate results at the cost of higher latency than client-side filtering."
        },
        "clangd.restartAfterCrash": {
          "type": "boolean",
          "default": true,
          "description": "Auto restart clangd (up to 4 times) if it crashes."
        },
        "clangd.checkUpdates": {
          "type": "boolean",
          "default": false,
          "description": "Check for language server updates on startup."
        },
        "clangd.onConfigChanged": {
          "type": "string",
          "default": "prompt",
          "description": "What to do when clangd configuration files are changed. Ignored for clangd 12+, which can reload such files itself; however, this can be overridden with clangd.onConfigChanged.forceEnable.",
          "enum": [
            "prompt",
            "restart",
            "ignore"
          ],
          "enumDescriptions": [
            "Prompt the user for restarting the server",
            "Automatically restart the server",
            "Do nothing"
          ]
        },
        "clangd.onConfigChanged.forceEnable": {
          "type": "boolean",
          "default": false,
          "description": "Force enable of \"On Config Changed\" option regardless of clangd version."
        },
        "clangd.detectExtensionConflicts": {
          "type": "boolean",
          "default": true,
          "description": "Warn about conflicting extensions and suggest disabling them."
        },
        "clangd.inactiveRegions.useBackgroundHighlight": {
          "type": "boolean",
          "default": false,
          "description": "Use a background highlight rather than opacity to identify inactive preprocessor regions."
        },
        "clangd.inactiveRegions.opacity": {
          "type": "number",
          "default": 0.55,
          "description": "Opacity of inactive regions (used only if clangd.inactiveRegions.useBackgroundHighlight=false)"
        },
        "clangd.enableCodeCompletion": {
          "type": "boolean",
          "default": true,
          "description": "Enable code completion provided by the language server"
        },
        "clangd.enableHover": {
          "type": "boolean",
          "default": true,
          "description": "Enable hovers provided by the language server"
        },
        "clangd.enable": {
          "type": "boolean",
          "default": true,
          "description": "Enable clangd language server features"
        },
        "kappa.voyageApiKey": {
          "type": "string",
          "default": "",
          "description": "API key for Voyage AI service used for semantic embeddings and search",
          "scope": "application"
        }
      }
    },
    "walkthroughs": [
      {
        "id": "setup",
        "title": "Kappa Setup",
        "description": "Setup Kappa to work with your codebase.",
        "steps": [
          {
            "id": "setVoyageApiKey",
            "title": "Set Voyage AI API Key",
            "description": "Optional, but strongly recommended.\n\n[Set API Key](command:kappa.changeVoyageApiKey)",
            "media": {
              "markdown": "media/walkthroughs/set-voyage-api-key.md"
            },
            "completionEvents": [
              "onContext:walkthroughVoyageApiKeySet"
            ]
          },
          {
            "id": "indexCodebase",
            "title": "Index the codebase",
            "description": "[Index the codebase](command:kappa.indexCodebase)",
            "media": {
              "markdown": "media/walkthroughs/index-codebase.md"
            },
            "completionEvents": [
              "onCommand:kappa.indexCodebase"
            ]
          },
          {
            "id": "waitForIndexing",
            "title": "Wait for the codebase to be indexed",
            "media": {
              "markdown": "media/walkthroughs/wait-for-indexing.md"
            },
            "completionEvents": [
              "onContext:walkthroughIndexingComplete"
            ]
          }
        ]
      }
    ],
    "languageModelTools": [
      {
        "name": "get_diff_between_object_files",
        "displayName": "Objdiff",
        "userDescription": "This tool uses Objdiff to compare two object files and shows their differences.",
        "modelDescription": "This tool compares two object files and returns the differences between them. It can be used to understand changes in compiled code, such as function additions, removals, or modifications. You should use this tool whenever you compile the project and you need to analyze the differences between the target assembly and the one from your current C code. You need to specify which function to compare using the `functionName` parameter.",
        "canBeReferencedInPrompt": true,
        "toolReferenceName": "objdiff",
        "icon": "media/branding/logo.png",
        "inputSchema": {
          "type": "object",
          "required": [
            "functionName",
            "currentObjectFilePath",
            "targetObjectFilePath"
          ],
          "properties": {
            "functionName": {
              "type": "string",
              "description": "The name of the function to compare (e.g., 'sub_805ECC4', 'my_function')"
            },
            "currentObjectFilePath": {
              "type": "string",
              "description": "The path to the current object file, which is compiled from the source code (e.g., 'build/main.o')"
            },
            "targetObjectFilePath": {
              "type": "string",
              "description": "The path to the target object file, which is the one you want to compare against (e.g., 'expected/main.o')"
            }
          }
        }
      }
    ]
  },
  "scripts": {
    "vscode:prepublish": "yarn run package",
    "build": "yarn format && yarn run check-types && yarn run lint && yarn run format:check && node esbuild.js",
    "package": "yarn run check-types && yarn run lint && yarn run format:check && node esbuild.js --production",
    "check-types": "tsc --noEmit",
    "lint": "eslint src",
    "format": "prettier --write .",
    "format:check": "prettier --check .",
    "pretest": "yarn build",
    "test": "wdio run ./src/test/wdio.conf.ts"
  },
  "packageManager": "yarn@1.22.22+sha1.ac34549e6aa8e7ead463a7407e1c7390f61a6610",
  "dependencies": {
    "@ast-grep/lang-c": "^0.0.2",
    "@ast-grep/napi": "^0.38.6",
    "@clangd/install": "0.1.20",
    "dedent": "^1.6.0",
    "diff": "^8.0.2",
    "objdiff-wasm": "3.0.0-beta.10",
    "rxdb": "^16.15.0",
    "rxjs": "^7.8.2",
    "umap-js": "^1.4.0",
    "vscode-languageclient": "^9.0.1",
    "zod": "^4.0.5"
  },
  "devDependencies": {
    "@types/mocha": "^10.0.10",
    "@types/node": "20.x",
    "@types/vscode": "^1.96.0",
    "@typescript-eslint/eslint-plugin": "^8.31.1",
    "@typescript-eslint/parser": "^8.31.1",
    "@wdio/cli": "^9.15.0",
    "@wdio/globals": "^9.15.0",
    "@wdio/local-runner": "^9.15.0",
    "@wdio/mocha-framework": "^9.15.0",
    "@wdio/spec-reporter": "^9.15.0",
    "esbuild": "^0.25.3",
    "eslint": "^9.25.1",
    "npm-run-all": "^4.1.5",
    "prettier": "^3.5.3",
    "typescript": "^5.8.3",
    "wdio-vscode-service": "^6.1.3"
  }
}
